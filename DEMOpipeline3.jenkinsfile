pipeline {
    agent any
    environment {
        CITRIXDATA = credentials('secret')
    }
        stages {
            stage('Parameters'){
                steps {
                    script {
                    properties([
                            parameters([
                                                                [$class: 'ChoiceParameter', 
                                    choiceType: 'PT_SINGLE_SELECT', 
                                    description: 'Select the ConnectionData from the Dropdown List', 
                                    filterLength: 1, 
                                    filterable: false, 
                                    name: 'ConnectionData', 
                                    script: [
                                        $class: 'GroovyScript', 
                                        fallbackScript: [
                                            script: 
                                                "return['Could not get connections from DB']"
                                        ], 
                                        script: [
                                            script: '''
                                                import groovy.sql.Sql

def output = []

def sql = Sql.newInstance('jdbc:sqlserver://localhost:1433;encrypt=true;trustServerCertificate=true;', 'CodaUser', 'CodaPassword', 'com.microsoft.sqlserver.jdbc.SQLServerDriver')

String sqlString = "SELECT [ConnectionData] FROM [CODA].[dbo].[Connections] where ConnectionType = \'FirstType\'"
sql.eachRow(sqlString){ row -> output.push(row.'ConnectionData')
}
sql.close()
return output.sort()
                                                '''
                                        ]
                                    ]
                                ],
                            ])
                        ])
                    }
                }
            }
            stage('one'){
                steps{
                    powershell 'Write-Output "$env:Env"'
                    powershell 'Write-Output "$env:AMIList"'
                    powershell 'Write-Output "$env:FromFile"'
                    powershell '''
                    $data = get-content "$env:CITRIXDATA"
                    write-output $data
                    '''
                }
            }
        }
}